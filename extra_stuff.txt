create_routers();

	socklen_t manager_address_len = sizeof(manager_address);
	fd_set socket_descriptors;
	int select_result, max_socket;
	int router_sockets[NUM_NODES];
	for(int i = 0; i < NUM_NODES; i++){
		router_sockets[i] = 0;
	}

	while(true){
		FD_ZERO(&socket_descriptors);
		FD_SET(manager_socket, &socket_descriptors);
		max_socket = manager_socket;

		for(int i = 0; i < NUM_NODES; i++){
			if(router_sockets[i] > 0){
				FD_SET(router_sockets[i], &socket_descriptors);
			}
			if(router_sockets[i] > max_socket){
				max_socket = router_sockets[i];
			}	
		}

		select_result = select(max_socket+1, &socket_descriptors, 0, 0, 0);
		if(select_result == -1){
			cout << "Error: Could not select." << endl;
			return -1;
		}
	
		if(FD_ISSET(manager_socket, &socket_descriptors)){
			int accept_socket = accept(manager_socket, (struct sockaddr*)&manager_address, &manager_address_len);
			if(accept_socket == -1){
				cout << "Error: Could not accept." << endl;
				return -1;
			}
			if(DEBUG){ cout << "Accepted Socket: " << accept_socket << endl; }

			char message[] = "Hello router! Nice to meet you!";
			int send_result = send(accept_socket, &message, strlen(message), 0);
			if(send_result == -1){
				cout << "Error: Could not send message to router." << endl;
				return -1;
			}
			if(DEBUG){ cout << "Sent message to router." << endl; }

			for(int i = 0; i < NUM_NODES; i++){
				if(router_sockets[i] == 0){
					router_sockets[i] = accept_socket;
					break;
				}
			}
		}
	}
